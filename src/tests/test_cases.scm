(import (test_driver))

(test-case 5 "5" "Runtime - Simple Fixnum")
(test-case #\a "a" "Runtime - Simple Char (a)")
(test-case #\A "A" "Runtime - Simple Char (A)")
(test-case #t "1" "Runtime - Simple Boolean (#t)")
(test-case #f "0" "Runtime - Simple Boolean (#f)")
(test-case '() "()" "Runtime - Empty List")
(test-case '(add1 5) "6" "Unary Primitive - add1")
(test-exception '(add1 #t) "Unary Primitive - add1 with boolean")
(test-exception '(add1 #\t) "Unary Primitive - add1 with char")
(test-exception '(add1 '()) "Unary Primitive - add1 with empty list")
(test-case '(sub1 5) "4" "Unary Primitive - sub1")
(test-exception '(sub1 #t) "Unary Primitive - sub1 with boolean")
(test-exception '(sub1 #\t) "Unary Primitive - sub1 with char")
(test-exception '(sub1 '()) "Unary Primitive - sub1 with empty list")
(test-case '(integer->char 65) "A" "Unary Primitive - integer->char (65 -> A)")
(test-case '(integer->char 100) "d" "Unary Primitive - integer->char (100 -> d)")
(test-case '(char->integer #\a) "97" "Unary Primitive - char->integer (a -> 97)")
(test-case '(char->integer #\d) "100" "Unary Primitive - char->integer (d -> 100)")
(test-case '(zero? 0) "1" "Unary Primitive - (zero? 0)")
(test-case '(zero? 5) "0" "Unary Primitive - (zero? 5)")
(test-exception '(zero? #t) "Unary Primitive - (zero? #t)")
(test-case '(null? 100) "0" "Unary Primitive - '(null? 100)")
(test-case '(null? #t) "0" "Unary Primitive - '(null? #t)")
(test-case '(null? #\a) "0" "Unary Primitive - '(null? #\a)")
(test-case '(null? '()) "1" "Unary Primitive - '(null? '())")
(test-case '(not #f) "1" "Unary Primitive - '(not #f)")
(test-case '(not #t) "0" "Unary Primitive - '(not #t)")
(test-case '(not 0) "0" "Unary Primitive - '(not 0)")
(test-case '(not #\a) "0" "Unary Primitive - '(not #\a)")
(test-case '(not '()) "0" "Unary Primitive - '(not '())")
(test-case '(integer? 5) "1" "Unary Primitive - '(integer? 5)")
(test-case '(integer? #t) "0" "Unary Primitive - '(integer? #t)")
(test-case '(integer? #\a) "0" "Unary Primitive - '(integer? #\a)")
(test-case '(integer? '()) "0" "Unary Primitive - '(integer? '())")
(test-case '(boolean? #t) "1" "Unary Primitive - '(boolean? #t)")
(test-case '(boolean? #f) "1" "Unary Primitive - '(boolean? #f)")
(test-case '(boolean? 1) "0" "Unary Primitive - '(boolean? 1)")
(test-case '(boolean? 0) "0" "Unary Primitive - '(boolean? 0)")
(test-case '(boolean? #\a) "0" "Unary Primitive - '(boolean? #\a)")
(test-case '(boolean? '()) "0" "Unary Primitive - '(boolean? '())")
(test-case '(char? #\a) "1" "Unary Primitive - '(char? #\a)")
(test-case '(char? #t) "0" "Unary Primitive - '(char? #t)")
(test-case '(char? 1) "0" "Unary Primitive - '(char? 1)")
(test-case '(char? '()) "0" "Unary Primitive - '(char? '())")
